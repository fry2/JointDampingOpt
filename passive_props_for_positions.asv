curvars = whos;
if ~any(contains({curvars.name},'pvStruct'))
    load('pvStruct.mat')
    load('C:\Users\fry16\OneDrive\Documents\NW_data_local\muscle stim kinematics and forces\17503_datasummary.mat','kinematic*');
        kinematic_muscle_name(2,:) = lower({'LH_Illiopsoas','LH_GemellusSuperior','LH_SemitendinosusPrincipal',...
        'LH_SemitendinosusAccessory','LH_VastusLateralis','LH_BicepsFemorisPosterior','LH_BicepsFemorisAnterior'});
end

input6zones = 0; out6zones = 0;

try 
    if input6zones
        pvGlobal_old = pvStruct.pvGlobal6;
    else
        pvGlobal_old = pvStruct.pvGlobal38;
    end
     pvG_grades_old = pvStruct.pvGlobal_grades;
catch
    if input6zones
        pvGlobal_old = repmat([5 500 100],1,6);
    else
        pvGlobal_old = repmat([5 500 100],1,38);
    end
    pvG_grades_old = 1e8*ones(1,length(kinematic_currents));
end

passVals6 = pvGlobal_old;
maxTimeTrial = 10; %in min
maxJM = NW_jointmotion_maxtrial_all(kinematic_data,0);
% NWmotion_temp = maxJM{1};
for ii = 1:7
    [reshapedJM{ii},ts{ii}] = NW_reshaper(maxJM{ii});
end
stimLevel = 20;
[simText,stimID] = simText_editor(kinematic_muscle_name{2,1},reshapedJM{1},'on',ts{1});
[passVals6,mInfo,fVal,history] = passive_opt_for_zones(simText,reshapedJM,passVals6,stimLevel,maxTimeTrial,input6zones,out6zones,ts);
%% Now that we have passive values, we need to analyze their effectiveness at recreating NW waveforms
    outJM = cell(1,3); pvG_grades_new = zeros(1,7);
    for ii = 1:7
        NWmotion_temp = reshapedJM{ii};
        stimLevel = 20;
        if ~any(isnan(NWmotion_temp),'all')
            [simText,stimID] = simText_editor(kinematic_muscle_name{2,ii},NWmotion_temp,'on',ts{ii});
            numZones = length(unique(cell2mat(mInfo(:,2))));
            [pvG_grades_new(ii),jm] = objFun_passive(simText,NWmotion_temp,passVals6,'all',stimID,stimLevel,numZones,mInfo);
            outJM{ii} = jm;
        else
            outJM{ii} = NaN(size(NWmotion_temp));
        end
    end
    %%
    newScore = trapz(pvG_grades_new);
    oldScore = trapz(pvG_grades_old);
    if newScore < oldScore
        disp(['New score (',num2str(newScore),') is better than old score (',num2str(oldScore),'), SAVING new values.'])
        %NWmotion = [NWbaselined{1}(:,1) NWbaselined{2}(:,1) NWbaselined{3}(:,1)]; 
        NWmotion = maxJM{1};
        [projText] = projText_editor(passVals6,mInfo,stimID,NWmotion);
        if out6zones
            pvStruct.pvGlobal6 = passVals6;
        else
            pvStruct.pvGlobal38 = passVals6;    
        end 
        pvStruct.pvGlobal_grades = pvG_grades_new;
        save('pvStruct.mat','pvStruct')
    else
        disp(['New score (',num2str(newScore),') is NOT better than old score (',num2str(oldScore),'), NOT saving new values.'])
    end
return
%% Find the correlation matrix, showing how well each joint matches experimental data
corrMats = [];
for jj = 1:3
    startInd = 273; endInd = 358;
    corrMats(:,jj) = diag(corr(NWbaselined{jj}(startInd:endInd,:),outJM{jj}(startInd:endInd,:)));
end
%% Determine whether or not to save the data
if isempty(corrMats_old) || length(trials2test)>length(corrMats_old)
    disp('New batch, saving.')
    pvMusc.passVals6 = passVals6;
    pvMusc.passVals6_stack = reshape(passVals6,3,6)';
    pvMusc.corrMats = corrMats;
    pvMusc.NWbaselined = NWbaselined;
    pvMusc.outJM = outJM;
    pvStruct.(kinematic_muscle_name{1,mnum}) = pvMusc;
    %save([kinematic_muscle_name{1,mnum},'_finetuned6.mat'],'passVals6','fVals_optimization','corrMats','fVals_optimization_len','NWbaselined','outJM','passVals_optimization')
    save('pvStruct.mat','pvStruct')
else
    %newScore = sum(sum(rmmissing(corrMats(1:trials2test,:))));
    %oldScore = sum(sum(rmmissing(corrMats_old(1:trials2test,:))));
    newScore = trapz(pvMusc.fVals_grades);
    oldScore = trapz(fVals_grades_old);
    if newScore < oldScore
        disp(['New score (',num2str(newScore),') is better than old score (',num2str(oldScore),'), SAVING new values.'])
        NWmotion = [NWbaselined{1}(:,1) NWbaselined{2}(:,1) NWbaselined{3}(:,1)]; 
        [projText] = projText_editor(passVals6,mInfo,stimID,NWmotion);
        %save([kinematic_muscle_name{1,mnum},'_finetuned6.mat'],'passVals6','fVals_optimization','corrMats','fVals_optimization_len','NWbaselined','outJM','passVals_optimization')
        pvMusc.passVals6 = passVals6;
        pvMusc.passVals6_stack = reshape(passVals6,3,6)';
        pvMusc.corrMats = corrMats;
        pvMusc.NWbaselined = NWbaselined;
        pvMusc.outJM = outJM;
        pvStruct.(kinematic_muscle_name{1,mnum}) = pvMusc;
        %save([kinematic_muscle_name{1,mnum},'_finetuned6.mat'],'passVals6','fVals_optimization','corrMats','fVals_optimization_len','NWbaselined','outJM','passVals_optimization')
        save('pvStruct.mat','pvStruct')
    else
        disp(['New score (',num2str(newScore),') is NOT better than old score (',num2str(oldScore),'), NOT saving new values.'])
    end
end
%% Correlation figures for Hip Knee Ankle
    jointNames = {'Hip';'Knee';'Ankle'};
    for ii = 1:3
        [corrFig,cdata1] = createCorrFig(corrMats(:,ii),0);
        set(corrFig,'Position',[1558,733-355*(ii-1),359,260],'Name',jointNames{ii})
        corrFig.Children(2).Title.String = [jointNames{ii},' [',num2str(min(corrFig.Children(1).Ticks)),' ',num2str(max(corrFig.Children(1).Ticks)),']',];
        cFigs(ii) = corrFig;
    end
%% Individual trial jointMotion and NWmotion
    %trial = 14;
    %NWmotion = [NWbaselined{1}(:,trial) NWbaselined{2}(:,trial) NWbaselined{3}(:,trial)]; 
    %jointMotion = [outJM{1}(:,trial) outJM{2}(:,trial) outJM{3}(:,trial)];
    trial = 3; mnum = trial;
    NWmotion = (reshapedJM{trial}-[98.4373 102.226 116.2473]).*(pi/180);
    %NWmotion = reshapedJM{trial};
    jointMotion = outJM{trial};
    %dt = .01;
    dt = .54e-3;
    timeVec = 0:dt:((length(NWmotion)-1)*dt);

    figure('Position',[962,2,958,994]); subp(1) = subplot(2,1,1); joints = 1:3; startInd = 1; endInd = min([length(NWmotion) length(jointMotion)]);
    plot(timeVec(startInd:endInd),NWmotion(startInd:endInd,joints),'LineWidth',2);legend({'Hip';'Knee';'Ankle'});%ylim([60 200]);
    title([kinematic_muscle_name{1,mnum},' Desired Joint Motion']); ylabel('Joint Angle (deg)');xlabel('Time (s)');
    subp(2) = subplot(2,1,2);
    plot(timeVec(startInd:endInd),jointMotion(startInd:endInd,joints),'LineWidth',2);
    ylim([60 200]);title('Simulation Results');ylabel('Joint Angle (deg)');xlabel('Time (s)');%xlim([0 max(timeVec)])
%% All trials in green black subplot
figure('Position',[962,2,958,994])
startInd = 273; endInd = 358;%endInd = min([length(NWmotion) length(jointMotion)]);
selInds = [48:196,startInd:endInd];
yLims = [min([reshapedJM{1};outJM{1}],[],'all') max([reshapedJM{1};outJM{1}],[],'all')];
for ii = 2:7
    if min([reshapedJM{ii};outJM{ii}],[],'all') < yLims(1)
        yLims(1) = min([reshapedJM{ii};outJM{ii}],[],'all');
    end
    if max([reshapedJM{ii};outJM{ii}],[],'all') > yLims(2)
        yLims(2) = max([reshapedJM{ii};outJM{ii}],[],'all');
    end
end   
for ii = 1:7
    subplot(7,1,ii)
    plot(reshapedJM{ii},'g','LineWidth',2)
    hold on
    plot(outJM{ii},'k','LineWidth',2)
    ylim(yLims)
    title([kinematic_muscle_name{1,ii},' ',num2str(pvStruct.pvGlobal_grades(ii))])
end
%% Function value over iterations
    fvlcum(1) = fVals_optimization_len(1);
    for jj = 2:length(fVals_optimization_len)-1
        if jj == 2
            fvlcum(jj) = fVals_optimization_len(jj)+fVals_optimization_len(jj-1);
        else
            fvlcum(jj) = fVals_optimization_len(jj)+fvlcum(jj-1);
        end
    end
    fvlFig = figure('Position',[489,558,1408,420]); scatter(1:length(fVals_optimization),fVals_optimization,500,'b.');title('Objective function value over optimization iterations.');
    xlabel('Optimization Iterations'); ylabel('Cost Function')
    for jj = 1:length(fvlcum)
        xline(fvlcum(jj));
    end
    fvlFig.Children(1).XTick = fvlcum;
%% Scatter plot of muscle values
figure
cm = jet(6);
switch 1
    case 1
        muscVals = reshape(pvStruct.pvGlobal38,3,38)';
        mTemp = zoning_sorter(simText,6);
    case 0
        muscVals = reshape(pvStruct.pvGlobal6,3,6)';
    otherwise
        error('error')
end
for ii = 1:size(muscVals,1)
    scatter3(muscVals(ii,1),muscVals(ii,2),muscVals(ii,3),'o','LineWidth',5)
    hold on
end
axis('equal')
%%
for ii = 1:length(kinematic_muscle_name)
    try
        bb = pvStruct.(kinematic_muscle_name{1,ii}).passVals6_stack;
        scatter3(bb(:,1),bb(:,2),bb(:,3),'o','LineWidth',5)
        hold on
        names{ii} = kinematic_muscle_name{1,ii};
    catch
    end
end
xlabel('B'); ylabel('Ks'), zlabel('Kp')
legend(names(~cellfun(@isempty,names)))
%% Compare new fVals_grades to old fVals_grades
% newGrades = pvMusc.fVals_grades;
% oldGrades = fVals_grades_old;
newGrades = pvStruct.pvGlobal_grades;
oldGrades = pvG_grades_old;
figure;plot(newGrades,'LineWidth',3);hold on;plot(oldGrades,'LineWidth',3);legend({'New Grades';'Old Grades'})
%% Show all muscle fVal grades 
bb = fields(pvStruct)
figure;
for ii = 1:7
    plot(pvStruct.(bb{ii}).fVals_grades); hold on;
end
legend(bb)